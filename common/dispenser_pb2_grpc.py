# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import dispenser_pb2 as dispenser__pb2
import nimble_pb2 as nimble__pb2


class DispenserStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getChannelStreamUrl = channel.unary_unary(
        '/stabox.Dispenser/getChannelStreamUrl',
        request_serializer=dispenser__pb2.StreamUrlReq.SerializeToString,
        response_deserializer=dispenser__pb2.GetStreamUrlRep.FromString,
        )
    self.getMovieUrl = channel.unary_unary(
        '/stabox.Dispenser/getMovieUrl',
        request_serializer=dispenser__pb2.StreamUrlReq.SerializeToString,
        response_deserializer=dispenser__pb2.GetStreamUrlRep.FromString,
        )
    self.getMovieFileUrl = channel.unary_unary(
        '/stabox.Dispenser/getMovieFileUrl',
        request_serializer=dispenser__pb2.StreamUrlReq.SerializeToString,
        response_deserializer=dispenser__pb2.GetStreamUrlRep.FromString,
        )
    self.getProgramStreamUrl = channel.unary_unary(
        '/stabox.Dispenser/getProgramStreamUrl',
        request_serializer=dispenser__pb2.StreamUrlReq.SerializeToString,
        response_deserializer=dispenser__pb2.GetStreamUrlRep.FromString,
        )
    self.storeNimbleReport = channel.unary_unary(
        '/stabox.Dispenser/storeNimbleReport',
        request_serializer=nimble__pb2.NimbleReportReq.SerializeToString,
        response_deserializer=nimble__pb2.NimbleReportRep.FromString,
        )
    self.storeFlussonicReport = channel.unary_unary(
        '/stabox.Dispenser/storeFlussonicReport',
        request_serializer=dispenser__pb2.FlussonicReportReq.SerializeToString,
        response_deserializer=dispenser__pb2.FlussonicReportRep.FromString,
        )
    self.reportColoAbuse = channel.unary_unary(
        '/stabox.Dispenser/reportColoAbuse',
        request_serializer=dispenser__pb2.GetStreamUrlRep.SerializeToString,
        response_deserializer=dispenser__pb2.ColoAbuseRep.FromString,
        )


class DispenserServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getChannelStreamUrl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMovieUrl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getMovieFileUrl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getProgramStreamUrl(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def storeNimbleReport(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def storeFlussonicReport(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def reportColoAbuse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DispenserServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getChannelStreamUrl': grpc.unary_unary_rpc_method_handler(
          servicer.getChannelStreamUrl,
          request_deserializer=dispenser__pb2.StreamUrlReq.FromString,
          response_serializer=dispenser__pb2.GetStreamUrlRep.SerializeToString,
      ),
      'getMovieUrl': grpc.unary_unary_rpc_method_handler(
          servicer.getMovieUrl,
          request_deserializer=dispenser__pb2.StreamUrlReq.FromString,
          response_serializer=dispenser__pb2.GetStreamUrlRep.SerializeToString,
      ),
      'getMovieFileUrl': grpc.unary_unary_rpc_method_handler(
          servicer.getMovieFileUrl,
          request_deserializer=dispenser__pb2.StreamUrlReq.FromString,
          response_serializer=dispenser__pb2.GetStreamUrlRep.SerializeToString,
      ),
      'getProgramStreamUrl': grpc.unary_unary_rpc_method_handler(
          servicer.getProgramStreamUrl,
          request_deserializer=dispenser__pb2.StreamUrlReq.FromString,
          response_serializer=dispenser__pb2.GetStreamUrlRep.SerializeToString,
      ),
      'storeNimbleReport': grpc.unary_unary_rpc_method_handler(
          servicer.storeNimbleReport,
          request_deserializer=nimble__pb2.NimbleReportReq.FromString,
          response_serializer=nimble__pb2.NimbleReportRep.SerializeToString,
      ),
      'storeFlussonicReport': grpc.unary_unary_rpc_method_handler(
          servicer.storeFlussonicReport,
          request_deserializer=dispenser__pb2.FlussonicReportReq.FromString,
          response_serializer=dispenser__pb2.FlussonicReportRep.SerializeToString,
      ),
      'reportColoAbuse': grpc.unary_unary_rpc_method_handler(
          servicer.reportColoAbuse,
          request_deserializer=dispenser__pb2.GetStreamUrlRep.FromString,
          response_serializer=dispenser__pb2.ColoAbuseRep.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'stabox.Dispenser', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
