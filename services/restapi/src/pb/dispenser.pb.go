// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispenser.proto

package stabox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamUrlReq struct {
	Login                uint32   `protobuf:"varint,1,opt,name=login,proto3" json:"login,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	IpAddress            string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent            string   `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ContentId            uint32   `protobuf:"varint,5,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	TimeStart            uint32   `protobuf:"varint,6,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	ForceHls             bool     `protobuf:"varint,8,opt,name=force_hls,json=forceHls,proto3" json:"force_hls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamUrlReq) Reset()         { *m = StreamUrlReq{} }
func (m *StreamUrlReq) String() string { return proto.CompactTextString(m) }
func (*StreamUrlReq) ProtoMessage()    {}
func (*StreamUrlReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_144487e8f424b86b, []int{0}
}

func (m *StreamUrlReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamUrlReq.Unmarshal(m, b)
}
func (m *StreamUrlReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamUrlReq.Marshal(b, m, deterministic)
}
func (m *StreamUrlReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamUrlReq.Merge(m, src)
}
func (m *StreamUrlReq) XXX_Size() int {
	return xxx_messageInfo_StreamUrlReq.Size(m)
}
func (m *StreamUrlReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamUrlReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamUrlReq proto.InternalMessageInfo

func (m *StreamUrlReq) GetLogin() uint32 {
	if m != nil {
		return m.Login
	}
	return 0
}

func (m *StreamUrlReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *StreamUrlReq) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *StreamUrlReq) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *StreamUrlReq) GetContentId() uint32 {
	if m != nil {
		return m.ContentId
	}
	return 0
}

func (m *StreamUrlReq) GetTimeStart() uint32 {
	if m != nil {
		return m.TimeStart
	}
	return 0
}

func (m *StreamUrlReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StreamUrlReq) GetForceHls() bool {
	if m != nil {
		return m.ForceHls
	}
	return false
}

type GetStreamUrlRep struct {
	StreamUrl            string   `protobuf:"bytes,1,opt,name=stream_url,json=streamUrl,proto3" json:"stream_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamUrlRep) Reset()         { *m = GetStreamUrlRep{} }
func (m *GetStreamUrlRep) String() string { return proto.CompactTextString(m) }
func (*GetStreamUrlRep) ProtoMessage()    {}
func (*GetStreamUrlRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_144487e8f424b86b, []int{1}
}

func (m *GetStreamUrlRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStreamUrlRep.Unmarshal(m, b)
}
func (m *GetStreamUrlRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStreamUrlRep.Marshal(b, m, deterministic)
}
func (m *GetStreamUrlRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamUrlRep.Merge(m, src)
}
func (m *GetStreamUrlRep) XXX_Size() int {
	return xxx_messageInfo_GetStreamUrlRep.Size(m)
}
func (m *GetStreamUrlRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamUrlRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamUrlRep proto.InternalMessageInfo

func (m *GetStreamUrlRep) GetStreamUrl() string {
	if m != nil {
		return m.StreamUrl
	}
	return ""
}

type FlussonicReportReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	RequestType          string   `protobuf:"bytes,5,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Duration             uint32   `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	StreamClients        uint32   `protobuf:"varint,7,opt,name=stream_clients,json=streamClients,proto3" json:"stream_clients,omitempty"`
	TotalClients         uint32   `protobuf:"varint,8,opt,name=total_clients,json=totalClients,proto3" json:"total_clients,omitempty"`
	SessionId            string   `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Country              string   `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	UserName             string   `protobuf:"bytes,11,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Port                 uint32   `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Qs                   string   `protobuf:"bytes,13,opt,name=qs,proto3" json:"qs,omitempty"`
	Host                 string   `protobuf:"bytes,14,opt,name=host,proto3" json:"host,omitempty"`
	UserAgent            string   `protobuf:"bytes,15,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	MediaRequest         string   `protobuf:"bytes,16,opt,name=media_request,json=mediaRequest,proto3" json:"media_request,omitempty"`
	Dryrun               bool     `protobuf:"varint,17,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
	Vhost                string   `protobuf:"bytes,18,opt,name=vhost,proto3" json:"vhost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlussonicReportReq) Reset()         { *m = FlussonicReportReq{} }
func (m *FlussonicReportReq) String() string { return proto.CompactTextString(m) }
func (*FlussonicReportReq) ProtoMessage()    {}
func (*FlussonicReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_144487e8f424b86b, []int{2}
}

func (m *FlussonicReportReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlussonicReportReq.Unmarshal(m, b)
}
func (m *FlussonicReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlussonicReportReq.Marshal(b, m, deterministic)
}
func (m *FlussonicReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlussonicReportReq.Merge(m, src)
}
func (m *FlussonicReportReq) XXX_Size() int {
	return xxx_messageInfo_FlussonicReportReq.Size(m)
}
func (m *FlussonicReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FlussonicReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_FlussonicReportReq proto.InternalMessageInfo

func (m *FlussonicReportReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *FlussonicReportReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlussonicReportReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *FlussonicReportReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FlussonicReportReq) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *FlussonicReportReq) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *FlussonicReportReq) GetStreamClients() uint32 {
	if m != nil {
		return m.StreamClients
	}
	return 0
}

func (m *FlussonicReportReq) GetTotalClients() uint32 {
	if m != nil {
		return m.TotalClients
	}
	return 0
}

func (m *FlussonicReportReq) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FlussonicReportReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *FlussonicReportReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *FlussonicReportReq) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *FlussonicReportReq) GetQs() string {
	if m != nil {
		return m.Qs
	}
	return ""
}

func (m *FlussonicReportReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FlussonicReportReq) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *FlussonicReportReq) GetMediaRequest() string {
	if m != nil {
		return m.MediaRequest
	}
	return ""
}

func (m *FlussonicReportReq) GetDryrun() bool {
	if m != nil {
		return m.Dryrun
	}
	return false
}

func (m *FlussonicReportReq) GetVhost() string {
	if m != nil {
		return m.Vhost
	}
	return ""
}

type FlussonicReportRep struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlussonicReportRep) Reset()         { *m = FlussonicReportRep{} }
func (m *FlussonicReportRep) String() string { return proto.CompactTextString(m) }
func (*FlussonicReportRep) ProtoMessage()    {}
func (*FlussonicReportRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_144487e8f424b86b, []int{3}
}

func (m *FlussonicReportRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlussonicReportRep.Unmarshal(m, b)
}
func (m *FlussonicReportRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlussonicReportRep.Marshal(b, m, deterministic)
}
func (m *FlussonicReportRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlussonicReportRep.Merge(m, src)
}
func (m *FlussonicReportRep) XXX_Size() int {
	return xxx_messageInfo_FlussonicReportRep.Size(m)
}
func (m *FlussonicReportRep) XXX_DiscardUnknown() {
	xxx_messageInfo_FlussonicReportRep.DiscardUnknown(m)
}

var xxx_messageInfo_FlussonicReportRep proto.InternalMessageInfo

type ColoAbuseRep struct {
	Do                   string   `protobuf:"bytes,1,opt,name=do,proto3" json:"do,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColoAbuseRep) Reset()         { *m = ColoAbuseRep{} }
func (m *ColoAbuseRep) String() string { return proto.CompactTextString(m) }
func (*ColoAbuseRep) ProtoMessage()    {}
func (*ColoAbuseRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_144487e8f424b86b, []int{4}
}

func (m *ColoAbuseRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColoAbuseRep.Unmarshal(m, b)
}
func (m *ColoAbuseRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColoAbuseRep.Marshal(b, m, deterministic)
}
func (m *ColoAbuseRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColoAbuseRep.Merge(m, src)
}
func (m *ColoAbuseRep) XXX_Size() int {
	return xxx_messageInfo_ColoAbuseRep.Size(m)
}
func (m *ColoAbuseRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ColoAbuseRep.DiscardUnknown(m)
}

var xxx_messageInfo_ColoAbuseRep proto.InternalMessageInfo

func (m *ColoAbuseRep) GetDo() string {
	if m != nil {
		return m.Do
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamUrlReq)(nil), "stabox.StreamUrlReq")
	proto.RegisterType((*GetStreamUrlRep)(nil), "stabox.GetStreamUrlRep")
	proto.RegisterType((*FlussonicReportReq)(nil), "stabox.FlussonicReportReq")
	proto.RegisterType((*FlussonicReportRep)(nil), "stabox.FlussonicReportRep")
	proto.RegisterType((*ColoAbuseRep)(nil), "stabox.ColoAbuseRep")
}

func init() { proto.RegisterFile("dispenser.proto", fileDescriptor_144487e8f424b86b) }

var fileDescriptor_144487e8f424b86b = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6f, 0x33, 0x35,
	0x10, 0x55, 0xf2, 0x35, 0xf9, 0x12, 0x77, 0x93, 0x50, 0x13, 0x51, 0xb3, 0xd0, 0x12, 0x36, 0x45,
	0x2a, 0x3d, 0x74, 0x11, 0xdc, 0x7a, 0xab, 0x8a, 0x0a, 0x1c, 0xa8, 0x50, 0x0a, 0x07, 0x4e, 0x2b,
	0x67, 0xd7, 0x4d, 0xac, 0x78, 0x6d, 0xc7, 0xf6, 0x56, 0x54, 0x15, 0x17, 0xfe, 0x02, 0x3f, 0x8d,
	0xbf, 0xc0, 0x95, 0x3b, 0xdc, 0x90, 0xc7, 0xbb, 0x21, 0x0d, 0x2d, 0x87, 0x8a, 0x9b, 0xe7, 0xbd,
	0xc9, 0x3c, 0xcd, 0x9b, 0x99, 0x0d, 0x1a, 0x15, 0xdc, 0x6a, 0x26, 0x2d, 0x33, 0xe7, 0xda, 0x28,
	0xa7, 0x70, 0xd7, 0x3a, 0x3a, 0x57, 0x3f, 0xc5, 0x1f, 0x2e, 0x94, 0x5a, 0x08, 0x96, 0x52, 0xcd,
	0x53, 0x2a, 0xa5, 0x72, 0xd4, 0x71, 0x25, 0x6d, 0xc8, 0x8a, 0x23, 0xc9, 0xcb, 0xb9, 0x60, 0x21,
	0x4a, 0xfe, 0x6c, 0xa1, 0xe8, 0xd6, 0x19, 0x46, 0xcb, 0x1f, 0x8c, 0x98, 0xb1, 0x35, 0x1e, 0xa3,
	0x8e, 0x50, 0x0b, 0x2e, 0x49, 0x6b, 0xd2, 0x3a, 0x1d, 0xcc, 0x42, 0x80, 0x8f, 0x10, 0xb2, 0xcc,
	0x5a, 0xae, 0x64, 0xc6, 0x0b, 0xd2, 0x9e, 0xb4, 0x4e, 0xfb, 0xb3, 0x7e, 0x8d, 0x7c, 0x53, 0x78,
	0x9a, 0xeb, 0x8c, 0x16, 0x85, 0x61, 0xd6, 0x92, 0x37, 0x81, 0xe6, 0xfa, 0x32, 0x00, 0x9e, 0xae,
	0x2c, 0x33, 0x19, 0x5d, 0x30, 0xe9, 0xc8, 0x5e, 0xa0, 0x3d, 0x72, 0xe9, 0x01, 0x4f, 0xe7, 0x4a,
	0x3a, 0x26, 0x9d, 0x2f, 0xde, 0x01, 0xdd, 0x7e, 0x8d, 0x84, 0xe2, 0x8e, 0x97, 0x2c, 0xb3, 0x8e,
	0x1a, 0x47, 0xba, 0x81, 0xf6, 0xc8, 0xad, 0x07, 0x70, 0x8c, 0x7a, 0x5a, 0x50, 0x77, 0xa7, 0x4c,
	0x49, 0xde, 0x42, 0xe9, 0x4d, 0x8c, 0x3f, 0x40, 0xfd, 0x3b, 0x65, 0x72, 0x96, 0x2d, 0x85, 0x25,
	0xbd, 0x49, 0xeb, 0xb4, 0x37, 0xeb, 0x01, 0xf0, 0xb5, 0xb0, 0xc9, 0x67, 0x68, 0xf4, 0x15, 0x73,
	0x5b, 0xcd, 0x6b, 0x68, 0x13, 0xe2, 0xac, 0x32, 0x02, 0x1c, 0xf0, 0x6d, 0x36, 0x19, 0xc9, 0x1f,
	0x6f, 0x10, 0xbe, 0x16, 0x95, 0xb5, 0x4a, 0xf2, 0x7c, 0xc6, 0xb4, 0x32, 0xae, 0xb6, 0xcc, 0xa9,
	0x15, 0x93, 0xf5, 0x0f, 0x42, 0x80, 0x31, 0xda, 0x93, 0xb4, 0x64, 0xb5, 0x59, 0xf0, 0xc6, 0x43,
	0xd4, 0xe6, 0xba, 0xf6, 0xa7, 0xcd, 0xb5, 0xcf, 0x71, 0x0f, 0x9a, 0xd5, 0x96, 0xc0, 0x1b, 0x7f,
	0x8c, 0x22, 0xc3, 0xd6, 0x15, 0xb3, 0x2e, 0x03, 0xae, 0x03, 0xdc, 0x7e, 0x8d, 0x7d, 0xef, 0x53,
	0x62, 0xd4, 0x2b, 0x2a, 0x03, 0x53, 0xad, 0xfd, 0xd8, 0xc4, 0xf8, 0x13, 0x34, 0xac, 0x5b, 0xc8,
	0x05, 0x67, 0xd2, 0x59, 0x30, 0x65, 0x30, 0x1b, 0x04, 0xf4, 0x2a, 0x80, 0x78, 0x8a, 0x06, 0x4e,
	0x39, 0x2a, 0x36, 0x59, 0x3d, 0xc8, 0x8a, 0x00, 0x6c, 0x92, 0x9e, 0x4e, 0xbd, 0xbf, 0x3b, 0x75,
	0x82, 0xde, 0xe6, 0xaa, 0x92, 0xce, 0x3c, 0x10, 0x04, 0x5c, 0x13, 0x7a, 0xdf, 0x61, 0xe0, 0x60,
	0xc0, 0x7e, 0x18, 0x8a, 0x07, 0x6e, 0xbc, 0x09, 0x18, 0xed, 0x79, 0xe7, 0x48, 0x04, 0x8a, 0xf0,
	0xf6, 0xc6, 0xac, 0x2d, 0x19, 0x04, 0x63, 0xd6, 0xd6, 0xe7, 0x2c, 0x95, 0x75, 0x64, 0x18, 0x8c,
	0xf1, 0xef, 0x9d, 0x2d, 0x1a, 0xed, 0x6e, 0xd1, 0x14, 0x0d, 0x4a, 0x56, 0x70, 0x9a, 0xd5, 0x4e,
	0x91, 0x77, 0x20, 0x23, 0x02, 0x70, 0x16, 0x30, 0xfc, 0x1e, 0xea, 0x16, 0xe6, 0xc1, 0x54, 0x92,
	0x1c, 0xc0, 0x36, 0xd4, 0x91, 0x1f, 0xe1, 0x3d, 0x08, 0xe2, 0x30, 0x42, 0x08, 0x92, 0xf1, 0x33,
	0xe3, 0xd6, 0xc9, 0x31, 0x8a, 0xae, 0x94, 0x50, 0x97, 0xf3, 0xca, 0x32, 0xbf, 0x34, 0x43, 0xd4,
	0x2e, 0x54, 0x3d, 0xfb, 0x76, 0xa1, 0x3e, 0xff, 0xab, 0x83, 0xfa, 0x5f, 0x36, 0xa7, 0x89, 0x35,
	0x7a, 0x77, 0xc1, 0xdc, 0xd5, 0x92, 0x4a, 0xc9, 0xc4, 0x66, 0xd9, 0xf0, 0xf8, 0x3c, 0x1c, 0xeb,
	0xf9, 0xf6, 0xf1, 0xc5, 0x87, 0x0d, 0xba, 0xb3, 0x98, 0xc9, 0xd9, 0x2f, 0xbf, 0xfd, 0xfe, 0x6b,
	0xfb, 0x24, 0xf9, 0x28, 0xcd, 0x43, 0x25, 0x9b, 0x3e, 0xfe, 0x73, 0x33, 0x3f, 0xa7, 0x75, 0xcf,
	0xf6, 0xa2, 0x75, 0x86, 0x29, 0xda, 0x5f, 0x30, 0xf7, 0xad, 0xba, 0xe7, 0xec, 0x15, 0x4a, 0x53,
	0x50, 0x3a, 0x4a, 0x48, 0x5a, 0xfa, 0x0a, 0x3b, 0x3a, 0x95, 0x11, 0x5e, 0x62, 0x85, 0x46, 0x8d,
	0xc4, 0x35, 0x17, 0xaf, 0x91, 0xf9, 0x14, 0x64, 0xa6, 0xc9, 0x71, 0x23, 0x73, 0xc7, 0xc5, 0x0b,
	0x62, 0xc1, 0xc1, 0xef, 0x8c, 0x5a, 0x18, 0x5a, 0xfe, 0x0f, 0x0e, 0xea, 0x50, 0xe9, 0x3f, 0x1c,
	0x5c, 0xa1, 0x03, 0xeb, 0x94, 0x61, 0x37, 0xf0, 0xa5, 0x0c, 0x93, 0xc7, 0x9b, 0xca, 0xdb, 0xe8,
	0x13, 0xc9, 0xa7, 0x84, 0x4e, 0x4e, 0x40, 0xf2, 0x38, 0x79, 0x3f, 0x0d, 0xb7, 0xc7, 0x8c, 0x4d,
	0x1f, 0x61, 0xb3, 0xbc, 0x9c, 0xcf, 0x0a, 0xed, 0x8d, 0x41, 0x6c, 0x67, 0xd3, 0x70, 0xdc, 0x94,
	0xfd, 0xf7, 0x17, 0x27, 0x7e, 0x99, 0xd3, 0xc9, 0x04, 0x54, 0x63, 0x4c, 0x9e, 0x51, 0xcd, 0x97,
	0x2c, 0x5f, 0xe1, 0x1f, 0xd1, 0x28, 0xc8, 0x6f, 0xd6, 0x18, 0xbf, 0x64, 0x5b, 0xbc, 0x71, 0x79,
	0x7b, 0xe5, 0x93, 0x43, 0xd0, 0x38, 0x48, 0xa2, 0x34, 0x57, 0x42, 0xd9, 0x94, 0x7a, 0xe2, 0xa2,
	0x75, 0x36, 0xef, 0xc2, 0xbf, 0xca, 0x17, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x80, 0xe7, 0xc1,
	0x9a, 0x9c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispenserClient is the client API for Dispenser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispenserClient interface {
	GetChannelStreamUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error)
	GetMovieUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error)
	GetMovieFileUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error)
	GetProgramStreamUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error)
	StoreNimbleReport(ctx context.Context, in *NimbleReportReq, opts ...grpc.CallOption) (*NimbleReportRep, error)
	StoreFlussonicReport(ctx context.Context, in *FlussonicReportReq, opts ...grpc.CallOption) (*FlussonicReportRep, error)
	ReportColoAbuse(ctx context.Context, in *GetStreamUrlRep, opts ...grpc.CallOption) (*ColoAbuseRep, error)
}

type dispenserClient struct {
	cc *grpc.ClientConn
}

func NewDispenserClient(cc *grpc.ClientConn) DispenserClient {
	return &dispenserClient{cc}
}

func (c *dispenserClient) GetChannelStreamUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error) {
	out := new(GetStreamUrlRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/getChannelStreamUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) GetMovieUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error) {
	out := new(GetStreamUrlRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/getMovieUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) GetMovieFileUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error) {
	out := new(GetStreamUrlRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/getMovieFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) GetProgramStreamUrl(ctx context.Context, in *StreamUrlReq, opts ...grpc.CallOption) (*GetStreamUrlRep, error) {
	out := new(GetStreamUrlRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/getProgramStreamUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) StoreNimbleReport(ctx context.Context, in *NimbleReportReq, opts ...grpc.CallOption) (*NimbleReportRep, error) {
	out := new(NimbleReportRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/storeNimbleReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) StoreFlussonicReport(ctx context.Context, in *FlussonicReportReq, opts ...grpc.CallOption) (*FlussonicReportRep, error) {
	out := new(FlussonicReportRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/storeFlussonicReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispenserClient) ReportColoAbuse(ctx context.Context, in *GetStreamUrlRep, opts ...grpc.CallOption) (*ColoAbuseRep, error) {
	out := new(ColoAbuseRep)
	err := c.cc.Invoke(ctx, "/stabox.Dispenser/reportColoAbuse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispenserServer is the server API for Dispenser service.
type DispenserServer interface {
	GetChannelStreamUrl(context.Context, *StreamUrlReq) (*GetStreamUrlRep, error)
	GetMovieUrl(context.Context, *StreamUrlReq) (*GetStreamUrlRep, error)
	GetMovieFileUrl(context.Context, *StreamUrlReq) (*GetStreamUrlRep, error)
	GetProgramStreamUrl(context.Context, *StreamUrlReq) (*GetStreamUrlRep, error)
	StoreNimbleReport(context.Context, *NimbleReportReq) (*NimbleReportRep, error)
	StoreFlussonicReport(context.Context, *FlussonicReportReq) (*FlussonicReportRep, error)
	ReportColoAbuse(context.Context, *GetStreamUrlRep) (*ColoAbuseRep, error)
}

// UnimplementedDispenserServer can be embedded to have forward compatible implementations.
type UnimplementedDispenserServer struct {
}

func (*UnimplementedDispenserServer) GetChannelStreamUrl(ctx context.Context, req *StreamUrlReq) (*GetStreamUrlRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStreamUrl not implemented")
}
func (*UnimplementedDispenserServer) GetMovieUrl(ctx context.Context, req *StreamUrlReq) (*GetStreamUrlRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieUrl not implemented")
}
func (*UnimplementedDispenserServer) GetMovieFileUrl(ctx context.Context, req *StreamUrlReq) (*GetStreamUrlRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieFileUrl not implemented")
}
func (*UnimplementedDispenserServer) GetProgramStreamUrl(ctx context.Context, req *StreamUrlReq) (*GetStreamUrlRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramStreamUrl not implemented")
}
func (*UnimplementedDispenserServer) StoreNimbleReport(ctx context.Context, req *NimbleReportReq) (*NimbleReportRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreNimbleReport not implemented")
}
func (*UnimplementedDispenserServer) StoreFlussonicReport(ctx context.Context, req *FlussonicReportReq) (*FlussonicReportRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFlussonicReport not implemented")
}
func (*UnimplementedDispenserServer) ReportColoAbuse(ctx context.Context, req *GetStreamUrlRep) (*ColoAbuseRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportColoAbuse not implemented")
}

func RegisterDispenserServer(s *grpc.Server, srv DispenserServer) {
	s.RegisterService(&_Dispenser_serviceDesc, srv)
}

func _Dispenser_GetChannelStreamUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).GetChannelStreamUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/GetChannelStreamUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).GetChannelStreamUrl(ctx, req.(*StreamUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_GetMovieUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).GetMovieUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/GetMovieUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).GetMovieUrl(ctx, req.(*StreamUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_GetMovieFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).GetMovieFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/GetMovieFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).GetMovieFileUrl(ctx, req.(*StreamUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_GetProgramStreamUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).GetProgramStreamUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/GetProgramStreamUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).GetProgramStreamUrl(ctx, req.(*StreamUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_StoreNimbleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NimbleReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).StoreNimbleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/StoreNimbleReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).StoreNimbleReport(ctx, req.(*NimbleReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_StoreFlussonicReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlussonicReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).StoreFlussonicReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/StoreFlussonicReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).StoreFlussonicReport(ctx, req.(*FlussonicReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispenser_ReportColoAbuse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamUrlRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispenserServer).ReportColoAbuse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stabox.Dispenser/ReportColoAbuse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispenserServer).ReportColoAbuse(ctx, req.(*GetStreamUrlRep))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispenser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stabox.Dispenser",
	HandlerType: (*DispenserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getChannelStreamUrl",
			Handler:    _Dispenser_GetChannelStreamUrl_Handler,
		},
		{
			MethodName: "getMovieUrl",
			Handler:    _Dispenser_GetMovieUrl_Handler,
		},
		{
			MethodName: "getMovieFileUrl",
			Handler:    _Dispenser_GetMovieFileUrl_Handler,
		},
		{
			MethodName: "getProgramStreamUrl",
			Handler:    _Dispenser_GetProgramStreamUrl_Handler,
		},
		{
			MethodName: "storeNimbleReport",
			Handler:    _Dispenser_StoreNimbleReport_Handler,
		},
		{
			MethodName: "storeFlussonicReport",
			Handler:    _Dispenser_StoreFlussonicReport_Handler,
		},
		{
			MethodName: "reportColoAbuse",
			Handler:    _Dispenser_ReportColoAbuse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispenser.proto",
}
