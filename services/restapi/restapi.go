package main

import (
	"flag"
	"net/http"
	"os"

	"github.com/rs/cors"

	"github.com/golang/glog"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"golang.org/x/net/context"
	"google.golang.org/grpc"

	pb "./src/pb"
)

var (
	defaultEndpoint = flag.String(
		"defaultEndpoint",
		os.Getenv("ROUTER_ADDRESS"),
		"StaBox autogenerated RESTAPI")
)

func run() error {
	ctx := context.Background()
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	mux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithInsecure()}

	pb.RegisterAccountsHandlerFromEndpoint(ctx, mux, *defaultEndpoint, opts)
	pb.RegisterDispenserHandlerFromEndpoint(ctx, mux, *defaultEndpoint, opts)
	pb.RegisterGeoResolverHandlerFromEndpoint(ctx, mux, *defaultEndpoint, opts)
	pb.RegisterServicesHandlerFromEndpoint(ctx, mux, *defaultEndpoint, opts)

	c := cors.New(cors.Options{
		AllowedMethods: []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
	})

	listen := ":" + os.Getenv("LISTEN")
	return http.ListenAndServe(listen, c.Handler(mux))
}

func main() {
	flag.Parse()
	defer glog.Flush()

	if err := run(); err != nil {
		glog.Fatal(err)
	}
}
